#Define Variables for Storage Account name
$StorageAccountName = "stracctname"
$FileShareName = "filesharename"

function Mount-AzureFileShare {
    param (
        [Parameter(Mandatory=$true)]
        [string]$StorageAccountName,

        [string]$UserName = "localhost\$StorageAccountName",
        [string]$DriveLetter = 'Z',
        [string]$FileShareName = 'test-fileshare'
    )

    $computerName = "$StorageAccountName.file.core.windows.net"
    $port = 445
    $key = $SecureVars.staimgweuacc
    
    $connectTestResult = Test-NetConnection -ComputerName $computerName -Port $port

    if ($connectTestResult.TcpTestSucceeded) {
        # Save the password so the drive will persist on reboot
        $cmdKeyArgs = "/add:`"$computerName`" /user:`"$UserName`" /pass:`"$key`""
        cmd.exe /C "cmdkey $cmdKeyArgs"

        # Mount the drive
        New-PSDrive -Name $DriveLetter -PSProvider FileSystem -Root "\\$computerName\$FileShareName"

        Write-Output "Drive has been mounted successfully to \\$computerName\$FileShareName."
    } else {
        Write-Output "Unable to reach the Azure storage account via port 445. Check to make sure your organization or ISP is not blocking port 445, or use Azure P2S VPN, Azure S2S VPN, or Express Route to tunnel SMB traffic over a different port."
    }
}

function Copy-FileToDestination {
    param(
        [Parameter(Mandatory=$true)]
        [string]$sourceFile,
        [Parameter(Mandatory=$true)]
        [string]$destinationFolder,
        [Parameter(Mandatory=$true)]
        [string]$sourceDirectory
    )

    # Check if any input is an empty string
    if (-not $sourceFile -or -not $sourceDirectory -or -not $destinationFolder) {
        Write-Output "One or more required inputs are empty. Please provide valid inputs."
        return
    }

    # Ensure the script runs with administrative privileges
    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Output "This script requires administrative privileges."
        return
    }

    # Check if the source network share is accessible
    if (-Not (Test-Path $sourceDirectory)) {
        Write-Output "The network share at $sourceDirectory is not accessible. Please check network permissions and connectivity."
        return
    } else {
        Write-Output "Network share at $sourceDirectory is accessible."
    }

    # Check if the destination folder exists, create it if it does not
    if (-Not (Test-Path $destinationFolder)) {
        New-Item -Path $destinationFolder -ItemType Directory
        Write-Output "Created destination directory at $destinationFolder"
    }

    # Perform the file copy
    try {
        Copy-Item -Path $sourceFile -Destination $destinationFolder -Force
        Write-Output "File copied successfully to $destinationFolder"
    } catch {
        Write-Error "Failed to copy file: $_"
    }
}

function Delete-AzureFileShareCreds {
    param (
        [Parameter(Mandatory=$true)]
        [string]$StorageAccountName
    )

    $computerName = "$StorageAccountName.file.core.windows.net"
    cmd.exe /C "cmdkey /delete:$computerName"

}

function Delete-Sources {
    param (
        [Parameter(Mandatory=$true)]
        [string]$destinationFolder
    )

    # Ensure the script runs with administrative privileges
    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Output "This script requires administrative privileges."
        return
    }

    try {
        # Check if the destination folder exists
        if (Test-Path -Path $destinationFolder) {
            # Force delete the destination folder and all contents
            Remove-Item -Path $destinationFolder -Recurse -Force
            Write-Output "Deleted the folder: $destinationFolder"
        } else {
            Write-Output "The specified folder does not exist: $destinationFolder"
            return
        }

        # Check if the parent folder is empty
        $parentFolder = Split-Path -Path $destinationFolder -Parent
        if ((Get-ChildItem -Path $parentFolder).Count -eq 0) {
            # Delete the parent folder if it is empty
            Remove-Item -Path $parentFolder -Force
            Write-Output "Deleted the empty parent folder: $parentFolder"
        }
    } catch {
        Write-Error "An error occurred: $_"
    }
}

#Install
Mount-AzureFileShare -StorageAccountName $StorageAccountName -FileShareName $FileShareName

#Define Variables for "\\staimgweu.file.core.windows.net\imgweu\StickyNotes\Files\Microsoft.MicrosoftStickyNotes_6.1.2.0_neutral_~_8wekyb3d8bbwe.Msixbundle"
$sourceFilePath = '\\staimgweu.file.core.windows.net\imgweu\StickyNotes\Files\Microsoft.MicrosoftStickyNotes_6.1.2.0_neutral_~_8wekyb3d8bbwe.Msixbundle'
$sourceDirPath = '\\staimgweu.file.core.windows.net\imgweu\StickyNotes\Files'
$destinationPath = 'C:\Packages\Scripts\StickyNotes\Files'

Copy-FileToDestination -sourceFile $sourceFilePath -destinationFolder $destinationPath -sourceDirectory $sourceDirPath

# Run Installer
Write-Host "INFO: Installing Microsoft.MicrosoftStickyNotes_6.1.2.0_neutral_~_8wekyb3d8bbwe.Msixbundle"
$ArgumentList = "-NoLogo -NoProfile -ExecutionPolicy Bypass -Command `"Add-AppxProvisionedPackage -Online -PackagePath 'C:\Packages\Scripts\StickyNotes\Files\Microsoft.MicrosoftStickyNotes_6.1.2.0_neutral_~_8wekyb3d8bbwe.Msixbundle' -SkipLicense`""
Start-Process C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -ArgumentList $ArgumentList -NoNewWindow -Wait -PassThru

# Define Variables for Icon File
$iconSourceFilePath = '\\staimgweu.file.core.windows.net\imgweu\StickyNotes\Files\Icons\Microsoft_Sticky_Notes_icon.ico'
$iconSourceDirPath = '\\staimgweu.file.core.windows.net\imgweu\StickyNotes\Files\Icons'
$iconDestinationPath = 'C:\Windows\System32'

# Check and create destination folder if it does not exist
if (-Not (Test-Path $iconDestinationPath)) {
    New-Item -Path $iconDestinationPath -ItemType Directory
}

# Copy the Icon to the Destination
Copy-FileToDestination -sourceFile $iconSourceFilePath -destinationFolder $iconDestinationPath -sourceDirectory $iconSourceDirPath


# Define Variables for Icon File
$iconSourceFilePath = '\\staimgweu.file.core.windows.net\imgweu\StickyNotes\Files\Shortcuts\Sticky Notes.lnk'
$iconSourceDirPath = '\\staimgweu.file.core.windows.net\imgweu\StickyNotes\Files\Shortcuts'
$iconDestinationPath = 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs'

# Check and create destination folder if it does not exist
if (-Not (Test-Path $iconDestinationPath)) {
    New-Item -Path $iconDestinationPath -ItemType Directory
}

# Copy the Icon to the Destination
Copy-FileToDestination -sourceFile $iconSourceFilePath -destinationFolder $iconDestinationPath -sourceDirectory $iconSourceDirPath



Delete-AzureFileShareCreds -StorageAccountName $StorageAccountName

# Delete Sources
Delete-Sources -destinationFolder $destinationPath
